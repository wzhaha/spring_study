一。Hystrix是一个服务保护框架
    能解决的问题：
        1。断路器
        2. 服务降级
        3。服务熔断
        4。服务隔离机制
        5。服务雪崩：达到服务器默认线程数的极限，导致其他客户端无法访问

    基于hystrix如何解决雪崩效应？
        原理：
            服务降级：
                在高并发情况下，防止用户一直等待，使用服务降级方式(直接返回一个友好的提示给客户端，调用fallBack方法)
                服务器中没有线程处理客户端请求的时候
            服务熔断：
                熔断机制目的为了保护服务，在高并发的情况下，如果请求达到一定极限(可以自己设置阔值)如果流量超出了设置阈值，
                然后直接拒绝访问，保护当前服务。使用服务降级方式返回一个友好提示，服务熔断和服务降级一起使用
            服务隔离：
                线程池隔离（使用这个）：每个服务接口，都有自己独立的线程池，每个线程池互不影响。
                    缺点：cpu占用率太高
                信号量隔离：使用一个原子计数器（或信号量）来记录当前有多少个线程在运行，当请求进来时先判断计数器的数值，
                    若超过设置的最大线程个数则拒绝该请求，若不超过则通行，这时候计数器+1，请求返 回成功后计数器-1。

二。分布式配置中心
    1。spring cloud config分布式配置中心
        分布式配置中心需要哪些组件：
            1）web管理系统（图形界面管理）
            2）存放分布式配置文件服务器（版本控制器，使用git）--持久化存储
            3）configServer（缓存配置文件服务器）--临时缓存
            4）configClient 读取configServer配置文件信息
    2。为什么使用分布式配置中心？
        背景：在微服务中，配置文件管理复杂
    3。什么是分布式配置中心？
        在微服务中使用同一服务器管理所有服务的配置信息，可以后台管理，可以实现配置实时刷新，不需要重启服务器
    4。分布式配置中心框架
        apollo: 携程分布式配置中心，配置文件信息存放在数据库
        spring cloud config：
        zookeeper：持久节点+事件通知

    客户端获取配置，配置文件要写在bootstrap.yml文件中，加载配置文件时，bootstrap优先于application


三。zuul动态网关
    产生背景：面向服务架构和微服务
    目的：解耦合

    接口如何分类？
        开放接口
        内部接口
    设计接口需要考虑：接口权限（内部，外部），考虑幂等性，安全性（https），验证签名，网关拦截实现黑白名单，接口使用restful风格
        考虑高并发，对接口服务实现服务降级，熔断，隔离，使用统一的api管理平台swagger

    网关作用：权限控制，负载均衡，日志管理，拦截请求

    nginx与zuul的区别：
    1。都可以实现负载均衡与反向代理，拦截请求，实现网关效果
    2。zuul采用ribbon+eureka实现本地负载均衡
       nginx采用服务器端实现负载均衡
       zuul适合微服务框架
       建议：nginx（反向代理）+zuul（请求拦截）


    网关集群nginx+zuul一主一备
